#### PART 3 #####
#################
#
numbers <- 1:201
squared.numbers <- numbers * numbers
squared.mean <- mean(squared.numbers)
print(squared.mean)
is.square <- sqrt(numbers) == round(sqrt(numbers))
squares <- numbers[is.square]
print(squares)
#################
#### PART 4 #####
#################
#
spring.break <- as.Date("2018-03-17")
today <- Sys.Date()
days.to.break <- spring.break - today
print(days.to.break)
# dates <- as.Date(c('2008-01-01','2009-03-02'))
# tmp <- as.POSIXlt(dates)
# tmp$year <- tmp$year+1
# dates2 <- as.Date(tmp)
MakeBirthdayIntro <- function(name, age, birthday) {
days.till.bday <- birthday - today
if (days.till.bday < 0) {
temp <- as.POSIXlt(birthday)
temp$year <- temp$year + 1
new.birthday <- as.Date(temp)
days.till.bday <- new.birthday - today
}
result <- paste(MakeIntroduction(my.name, my.age), "In", days.till.bday, "days I'll be", my.age + 1)
return(result)
}
my.birthday <- as.Date('2018-08-28')
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print(my.bday.intro)
# Luxi Zheng
# INFO 201 AE
# 01/10/2018
# install.packages(stringr)
library("stringr")
#################
#### PART 1 #####
#################
# make introduction
my.age <- 19
my.name <- "Luxi"
# This is a function named "MakeItroduction" that takes in two arguments:
# name and age. It will return a full introduction sentence
MakeIntroduction <- function(name, age) {
result <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(result)
}
my.intro <- MakeIntroduction(my.name, my.age)
print(my.intro)
# replace "Hello, my name is" with "Hey, I'm" and print it
casual.intro <- sub("Hello, my name is", "Hey, I'm", my.intro)
print(casual.intro)
capital.intro <- str_to_title(my.intro)
print(capital.intro)
intro.e.count <- str_count(my.intro, "e")
print(intro.e.count)
#################
#### PART 2 #####
#################
# create book titles and reviews
books <- c("The Night Circus", "Ship of Theseus", "Flow Magazine", "Harry Potter", "Everyday Matters", "An Illustrated Journey")
print(books)
top.three.books <- books[c(1:3)]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
print(book.reviews)
# This is a function called RemoveBook that takes two arguments:
# a vector of book titles and an index number
# this function will return a vector that contains the given book titles, but with title at the given index removed
RemoveBook <- function(titles, index) {
result <- titles[-index]
return(result)
}
books.without.four <- RemoveBook(books, 4)
print(books.without.four)
# print elements whose title is longer than 15 characters
title.lenghts <- nchar(books)
is.long <- title.lenghts > 15
long.titles <- books[is.long]
print(long.titles)
#################
#### PART 3 #####
#################
# do some calculations
numbers <- 1:201
squared.numbers <- numbers * numbers
squared.mean <- mean(squared.numbers)
print(squared.mean)
is.square <- sqrt(numbers) == round(sqrt(numbers))
squares <- numbers[is.square]
print(squares)
#################
#### PART 4 #####
#################
# calculate a person's birthday and modify introduction
spring.break <- as.Date("2018-03-17")
today <- Sys.Date()
days.to.break <- spring.break - today
print(days.to.break)
# This function modifies the old introduction.
# the new introduction will incude the birthday, days till bday, and new age
MakeBirthdayIntro <- function(name, age, birthday) {
days.till.bday <- birthday - today
if (days.till.bday < 0) {
temp <- as.POSIXlt(birthday)
temp$year <- temp$year + 1
new.birthday <- as.Date(temp)
days.till.bday <- new.birthday - today
}
result <- paste(MakeIntroduction(my.name, my.age), "In", days.till.bday, "days I'll be", my.age + 1)
return(result)
}
my.birthday <- as.Date('2018-08-28')
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print(my.bday.intro)
source('~/Desktop/INFO 201/a2-core-skills-luxizheng/Assignment.R')
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
setwd("~/Desktop/INFO 201/a3-using-data-luxizheng")
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
math.grades <- c(90, 91, 92, 93, 94, 95)
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", colnames(tas))
tas <- data.frame(names, math.grades, spanish.grades)
tas <- data.frame(names, math.grades, spanish.grades)
math.grades <- c(90, 91, 92, 93, 94, 95)
spanish.grades <- c(80, 79, 78, 77, 76, 75)
tas <- data.frame(names, math.grades, spanish.grades)
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", colnames(tas))
print(TA.data.frame.summary)
cols <- colnames(tas)
print(cols)
paste(cols)
setwd("~/Desktop/INFO 201/Practices/ch7-vectors/exercise-1")
print(names)
names <- c("Luxi", "Isabel", "Maggie")
print(names)
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Luxi", "Isabel", "Maggie")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
# Use the `length()` function to get the number of elements in `n`
# Add 1 to each element in `n` and print the result
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
# Subtract `m` FROM `n`. Note the recycling!
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `.1`
# increments. Store it in a variable `x.range`
# Create a vector `sin.wave` by calling the `sin()` function on each element
# in `x.range`.
# Create a vector `cos.wave` by calling the `cos()` function on each element
# in `x.range`.
# Create a vector `wave` by multiplying `sin.wave` and `cos.wave` together, then
# adding `sin.wave` to the product
# Use the `plot()` function to plot your `wave`!
length(n)
n <- 10:49
length(n)
add.1.to.n <- n + 1
print(add.1.to.n)
m <- seq(10, 1)
n - m
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Luxi", "Isabel", "Maggie")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
add.1.to.n <- n + 1
print(add.1.to.n)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `.1`
# increments. Store it in a variable `x.range`
# Create a vector `sin.wave` by calling the `sin()` function on each element
# in `x.range`.
# Create a vector `cos.wave` by calling the `cos()` function on each element
# in `x.range`.
# Create a vector `wave` by multiplying `sin.wave` and `cos.wave` together, then
# adding `sin.wave` to the product
# Use the `plot()` function to plot your `wave`!
x.range <- seq(-5, 10, .1)
sin.wave <- sin(x.range)
plot(wave)
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Luxi", "Isabel", "Maggie")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
# Add 1 to each element in `n` and print the result
add.1.to.n <- n + 1
print(add.1.to.n)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `.1`
# increments. Store it in a variable `x.range`
x.range <- seq(-5, 10, .1)
# Create a vector `sin.wave` by calling the `sin()` function on each element
# in `x.range`.
sin.wave <- sin(x.range)
# Create a vector `cos.wave` by calling the `cos()` function on each element
# in `x.range`.
cos.wave <- cos(x.range)
# Create a vector `wave` by multiplying `sin.wave` and `cos.wave` together, then
# adding `sin.wave` to the product
wave <- sin.wave * cos.wave + sin.wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
#################
#### PART 1 #####
#################
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
math.grades <- c(90, 91, 92, 93, 94, 95)
spanish.grades <- c(80, 79, 78, 77, 76, 75)
tas <- data.frame(names, math.grades, spanish.grades)
# Print a sentence "The TA data frame has X rows and Y cols: COL_NAMES", replacing X with the number of rows, Y with the number of columns, and COL_NAMES with a comma-separated list of the column names.
cols <- colnames(tas)
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", cols)
print(TA.data.frame.summary)
#################
#### PART 2 #####
#################
#################
#### PART 3 #####
#################
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", cols, collapse = TRUE)
#################
#### PART 1 #####
#################
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
math.grades <- c(90, 91, 92, 93, 94, 95)
spanish.grades <- c(80, 79, 78, 77, 76, 75)
tas <- data.frame(names, math.grades, spanish.grades)
# Print a sentence "The TA data frame has X rows and Y cols: COL_NAMES", replacing X with the number of rows, Y with the number of columns, and COL_NAMES with a comma-separated list of the column names.
cols <- colnames(tas)
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", cols, collapse = TRUE)
print(TA.data.frame.summary)
#################
#### PART 2 #####
#################
#################
#### PART 3 #####
#################
cols <- paste(colnames(tas), collapse = ",")
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", cols)
print(TA.data.frame.summary)
#################
#### PART 1 #####
#################
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
math.grades <- c(90, 91, 92, 93, 94, 95)
spanish.grades <- c(80, 79, 78, 77, 76, 75)
tas <- data.frame(names, math.grades, spanish.grades)
# Print a sentence "The TA data frame has X rows and Y cols: COL_NAMES", replacing X with the number of rows, Y with the number of columns, and COL_NAMES with a comma-separated list of the column names.
cols <- paste(colnames(tas), collapse = ", ")
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", cols)
print(TA.data.frame.summary)
#################
#### PART 2 #####
#################
#################
#### PART 3 #####
#################
#################
#### PART 1 #####
#################
names <- c("Adele Miller", "Anirudh Subramanyam", "Zhanna Voloshina", "Tejveer Rai", "Bao Dinh", "Iris Sun")
math.grades <- c(90, 85, 80, 90, 95, 90)
spanish.grades <- c(80, 90, 75, 95, 80, 75)
tas <- data.frame(names, math.grades, spanish.grades)
# Print a sentence "The TA data frame has X rows and Y cols: COL_NAMES", replacing X with the number of rows, Y with the number of columns, and COL_NAMES with a comma-separated list of the column names.
cols <- paste(colnames(tas), collapse = ", ")
TA.data.frame.summary <- paste("The TA data frame has", nrow(tas), "rows and" , ncol(tas), "cols:", cols)
print(TA.data.frame.summary)
rows <- cols <- paste(rownames(tas), collapse = ", ")
print(rows)
#################
#### PART 2 #####
#################
#################
#### PART 3 #####
#################
tas$grade.diff <- tas$math.grades + tas$spanish.grades
View(tas)
View(tas)
tas$grade.diff <- tas$math.grades - tas$spanish.grades
View(tas)
all.numbers <- c(first.ten, next.ten)
# Exercise 2: indexing and filtering vectors
# Create a vector `first.ten` that has the values 10 through 20 in it (using
# the : operator)
first.ten <- 10:20
# Create a vector `next.ten` that has the values 21 through 30 in it (using the
# seq() function)
next.ten <- seq(21, 30)
# Create a vector `all.numbers` by combining the previous two vectors
all.numbers <- c(first.ten, next.ten)
# Create a variable `eleventh` that contains the 11th element in `all.numbers`
# Create a vector `some.numbers` that contains the 2nd through the 5th elements
# of `all.numbers`
# Create a vector `even` that holds the even numbers from 1 to 100
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
# Create a vector `phone.numbers` that contains the numbers 8,6,7,5,3,0,9
# Create a vector `prefix` that has the first three elements of `phone.numbers`
# Create a vector `small` that has the values of `phone.numbers` that are
# less than or equal to 5
# Create a vector `large` that has the values of `phone.numbers` that are
# greater than 5
# Replace the values in `phone.numbers` that are larger than 5 with the number 5
# Replace every odd-numbered value in `phone.numbers` with the number 0
# Exercise 2: indexing and filtering vectors
# Create a vector `first.ten` that has the values 10 through 20 in it (using
# the : operator)
first.ten <- 10:20
# Create a vector `next.ten` that has the values 21 through 30 in it (using the
# seq() function)
next.ten <- seq(21, 30)
# Create a vector `all.numbers` by combining the previous two vectors
all.numbers <- c(first.ten, next.ten)
# Create a variable `eleventh` that contains the 11th element in `all.numbers`
eleventh <- all.numbers[11]
# Create a vector `some.numbers` that contains the 2nd through the 5th elements
# of `all.numbers`
# Create a vector `even` that holds the even numbers from 1 to 100
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
# Create a vector `phone.numbers` that contains the numbers 8,6,7,5,3,0,9
# Create a vector `prefix` that has the first three elements of `phone.numbers`
# Create a vector `small` that has the values of `phone.numbers` that are
# less than or equal to 5
# Create a vector `large` that has the values of `phone.numbers` that are
# greater than 5
# Replace the values in `phone.numbers` that are larger than 5 with the number 5
# Replace every odd-numbered value in `phone.numbers` with the number 0
# Exercise 2: indexing and filtering vectors
# Create a vector `first.ten` that has the values 10 through 20 in it (using
# the : operator)
first.ten <- 10:20
# Create a vector `next.ten` that has the values 21 through 30 in it (using the
# seq() function)
next.ten <- seq(21, 30)
# Create a vector `all.numbers` by combining the previous two vectors
all.numbers <- c(first.ten, next.ten)
# Create a variable `eleventh` that contains the 11th element in `all.numbers`
eleventh <- all.numbers[11]
# Create a vector `some.numbers` that contains the 2nd through the 5th elements
# of `all.numbers`
some.numbers <- all.numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
# Create a vector `phone.numbers` that contains the numbers 8,6,7,5,3,0,9
# Create a vector `prefix` that has the first three elements of `phone.numbers`
# Create a vector `small` that has the values of `phone.numbers` that are
# less than or equal to 5
# Create a vector `large` that has the values of `phone.numbers` that are
# greater than 5
# Replace the values in `phone.numbers` that are larger than 5 with the number 5
# Replace every odd-numbered value in `phone.numbers` with the number 0
even <- seq(1, 100, 2)
even <- seq(0, 100, 2)
even <- seq(2, 100, 2)
all(even %% 2)
all(even) %% 2
all(logical(even%%0))
all(logical(even%%2))
all(logical(even%%2))
all(even%%2 == 0)
# Exercise 2: indexing and filtering vectors
# Create a vector `first.ten` that has the values 10 through 20 in it (using
# the : operator)
first.ten <- 10:20
# Create a vector `next.ten` that has the values 21 through 30 in it (using the
# seq() function)
next.ten <- seq(21, 30)
# Create a vector `all.numbers` by combining the previous two vectors
all.numbers <- c(first.ten, next.ten)
# Create a variable `eleventh` that contains the 11th element in `all.numbers`
eleventh <- all.numbers[11]
# Create a vector `some.numbers` that contains the 2nd through the 5th elements
# of `all.numbers`
some.numbers <- all.numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 == 0)
# Create a vector `phone.numbers` that contains the numbers 8,6,7,5,3,0,9
# Create a vector `prefix` that has the first three elements of `phone.numbers`
# Create a vector `small` that has the values of `phone.numbers` that are
# less than or equal to 5
# Create a vector `large` that has the values of `phone.numbers` that are
# greater than 5
# Replace the values in `phone.numbers` that are larger than 5 with the number 5
# Replace every odd-numbered value in `phone.numbers` with the number 0
# Exercise 2: indexing and filtering vectors
# Create a vector `first.ten` that has the values 10 through 20 in it (using
# the : operator)
first.ten <- 10:20
# Create a vector `next.ten` that has the values 21 through 30 in it (using the
# seq() function)
next.ten <- seq(21, 30)
# Create a vector `all.numbers` by combining the previous two vectors
all.numbers <- c(first.ten, next.ten)
# Create a variable `eleventh` that contains the 11th element in `all.numbers`
eleventh <- all.numbers[11]
# Create a vector `some.numbers` that contains the 2nd through the 5th elements
# of `all.numbers`
some.numbers <- all.numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 == 0)
# Create a vector `phone.numbers` that contains the numbers 8,6,7,5,3,0,9
phone.numbers <- c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone.numbers`
prefix <- phone.numbers[1:3]
# Create a vector `small` that has the values of `phone.numbers` that are
# less than or equal to 5
# Create a vector `large` that has the values of `phone.numbers` that are
# greater than 5
# Replace the values in `phone.numbers` that are larger than 5 with the number 5
# Replace every odd-numbered value in `phone.numbers` with the number 0
small <- phone.numbers[phone.numbers < 5]
phone.numbers[phone.numbers > 5] <- 5
# Exercise 2: indexing and filtering vectors
# Create a vector `first.ten` that has the values 10 through 20 in it (using
# the : operator)
first.ten <- 10:20
# Create a vector `next.ten` that has the values 21 through 30 in it (using the
# seq() function)
next.ten <- seq(21, 30)
# Create a vector `all.numbers` by combining the previous two vectors
all.numbers <- c(first.ten, next.ten)
# Create a variable `eleventh` that contains the 11th element in `all.numbers`
eleventh <- all.numbers[11]
# Create a vector `some.numbers` that contains the 2nd through the 5th elements
# of `all.numbers`
some.numbers <- all.numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 == 0)
# Create a vector `phone.numbers` that contains the numbers 8,6,7,5,3,0,9
phone.numbers <- c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone.numbers`
prefix <- phone.numbers[1:3]
# Create a vector `small` that has the values of `phone.numbers` that are
# less than or equal to 5
small <- phone.numbers[phone.numbers < 5]
# Create a vector `large` that has the values of `phone.numbers` that are
# greater than 5
large <- phone.numbers[phone.numbers > 5]
# Replace the values in `phone.numbers` that are larger than 5 with the number 5
phone.numbers[phone.numbers > 5] <- 5
# Replace every odd-numbered value in `phone.numbers` with the number 0
# Exercise 2: indexing and filtering vectors
# Create a vector `first.ten` that has the values 10 through 20 in it (using
# the : operator)
first.ten <- 10:20
# Create a vector `next.ten` that has the values 21 through 30 in it (using the
# seq() function)
next.ten <- seq(21, 30)
# Create a vector `all.numbers` by combining the previous two vectors
all.numbers <- c(first.ten, next.ten)
# Create a variable `eleventh` that contains the 11th element in `all.numbers`
eleventh <- all.numbers[11]
# Create a vector `some.numbers` that contains the 2nd through the 5th elements
# of `all.numbers`
some.numbers <- all.numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2 == 0)
# Create a vector `phone.numbers` that contains the numbers 8,6,7,5,3,0,9
phone.numbers <- c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone.numbers`
prefix <- phone.numbers[1:3]
# Create a vector `small` that has the values of `phone.numbers` that are
# less than or equal to 5
small <- phone.numbers[phone.numbers < 5]
# Create a vector `large` that has the values of `phone.numbers` that are
# greater than 5
large <- phone.numbers[phone.numbers > 5]
# Replace the values in `phone.numbers` that are larger than 5 with the number 5
phone.numbers[phone.numbers > 5] <- 5
# Replace every odd-numbered value in `phone.numbers` with the number 0
phone.numbers[phone.numbers %% 2 == 1] <- 0
